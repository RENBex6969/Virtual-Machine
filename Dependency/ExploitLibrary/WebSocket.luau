local WebSocket = require("@lune/net").ws
local Task = require("@lune/task")

return {
  connect = function(Url)
    local WS = WebSocket.connect(Url)
    local Wrapper = {
      Running = true
    }
    
    local Callbacks = {
      OnMessage = {},
      OnClose = {}
    }
    
    local function createEvent(CallbackTable)
      local Event = newproxy(true)
      local MT = getmetatable(Event)
      MT.__index = {
        Connect = function(_, Function)
          table.insert(CallbackTable, Function)
        end
      }
      return Event
    end
    
    Wrapper.OnMessage = createEvent(Callbacks.OnMessage)
    Wrapper.OnClose = createEvent(Callbacks.OnClose)
    
    function Wrapper:Send(msg)
      WS:send(msg)
    end
    
    function Wrapper:Close()
      self.Running = false
      WS:close()
      for _, Function in ipairs(Callbacks.OnClose) do
        Function()
      end
    end
    
    Task.spawn(function()
      while Wrapper.Running do
        local msg = WS:next()
        if Message then
          for _, Function in ipairs(Callbacks.OnMessage) do
            Function(Message)
          end
        else
          if WS.closeCode ~= nil then
            Wrapper.Running = false
            for _, Function in ipairs(Callbacks.OnClose) do
              Function()
            end
          end
        end
      end
    end)
    return Wrapper
  end
}