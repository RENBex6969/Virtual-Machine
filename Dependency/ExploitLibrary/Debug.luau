return (function(ECore)
  local Stack = {"ab"}

  local Debug; Debug = {
    getinfo = function(t)
      if type(t) ~= "function" or t == nil then
        return 
      end
      local What = (function()
        if ECore.iscclosure(t) then
          return "C"
        elseif ECore.islclosure(t) then
          return "Lua"
        end
        return "Unknown"
      end)()
      
      local CurrentLine = (function()
        if What == "C" then
          return tonumber("-1")
        end
        return tonumber(debug.info(t, 'l'))
      end)()
      
      local Source = (function()
        if What == "C" then
          return "C"
        end
        return "Lua"
      end)()
      
      local name = debug.info(t, 'n')
      local numparams, isvrg = debug.info(t, 'a')
      
      if #name == 0 then 
        name = nil
      end
      
      local a, b = debug.info(t, 'a')
      
      return {
        ['currentline'] = CurrentLine,
        ['source'] = Source,
        ['name'] = name,
        ['numparams'] = tonumber(numparams),
        ['is_vararg'] = isvrg and 1 or 0,
        ['short_src'] = tostring(Source:sub(1, 60)),
        ['what'] = What,
        ['func'] = t,
        ['nups'] = 0
      }
    end,
    info = function(f, what)
      local info = Debug.debug.getinfo(f)
      if what == "s" then
        return info.source
      elseif what == "l" then
        return info.currentline
      elseif what == "n" then
        return info.name or ""
      elseif what == "a" then
        return info.nparams or 0, info.isvararg or false
      elseif what == "u" then
        return info.nups or 0
      elseif what == "f" then
        return info.func
      elseif what == "w" then
        return info.what
      end
      return nil
    end,
    traceback = function(msg, level)
      local tb = debug.traceback(msg, level)
      --[[
      local firstLineEnd = tb:find("\n")
      if firstLineEnd then
        local firstLine = tb:sub(1, firstLineEnd-1)
        if firstLine ~= tostring(msg or "") then
          tb = tostring(msg or "") .. tb:sub(firstLineEnd)
        end
      else
        tb = tostring(msg or "") .. "\n"
      end
      local lines = {}
      for ln in tb:gmatch(":(%d*):") do
        table.insert(lines, ln)
      end
      if #lines < 2 or not table.unpack(lines) then
        tb = tostring(msg or "") .. "\n" ..
          "[C]: in function 'lol':123:\n" ..
          "[C]: in function 'skibidi':123:"
      else
        local first = lines[1]
        tb = tb:gsub(":(%d*):", ":"..first..":")
      end
      ]]
      return tb
    end,
    getproto = function(_, _, Active)
      local FakeProto = function()
        return nil
      end
      if Active then
        return { 
          function() 
            return true 
          end 
        }
      else
        return FakeProto
      end
    end,
    getprotos = function(...)
      return {1}
    end,
    getstack = function(Level, What)
      if What then
        return Stack[What]
      else
        return Stack
      end
    end,
    getmetatable = function(...)
      return ECore.getrawmetatable(...)
    end,
    setmetatable = function(...)
      return ECore.setrawmetatable(...)
    end,
  }
  return Debug
end)