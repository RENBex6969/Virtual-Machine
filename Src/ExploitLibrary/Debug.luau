return (function(ECore)
  local Stack = {"ab"}

  local Debug; Debug = {
    getinfo = function(func)
      if type(func) ~= "function" or func == nil then
        return
      end
    
      local what
      if ECore.iscclosure(func) then
        what = "C"
      elseif ECore.islclosure(func) then
        what = "Lua"
      else
        what = "Unknown"
      end
    
      local currentline
      if what == "C" then
        currentline = -1
      else
        currentline = tonumber(debug.info(func, "l"))
      end
    
      local source = (what == "C") and "C" or "Lua"
    
      local name = debug.info(func, "n")
      if not name or #name == 0 then
        name = nil
      end
    
      local numparams, isvararg = debug.info(func, "a")
    
      return {
        currentline = currentline,
        source = source,
        name = name or "",
        numparams = tonumber(numparams) or 0,
        is_vararg = isvararg and 1 or 0,
        short_src = tostring(source:sub(1, 60)),
        what = what,
        func = func,
        nups = 0,
      }
    end,
    info = function(target, what)
      if type(target) == "number" then
        if what == "s" then
          return "C"
        elseif what == "l" then
          return debug.info(target, "l")
        elseif what == "n" then
          return ""
        elseif what == "a" then
          local nparams, isvararg = debug.info(target, "a")
          return nparams or 0, isvararg or false
        elseif what == "u" then
          return debug.info(target, "u") or 0
        elseif what == "f" then
          return debug.info(target, "f")
        elseif what == "w" then
          return "C"
        end
        return nil
      end
      
      if type(target) == "function" then
        local Info = Debug.getinfo(target)
        if what == "s" then
          return Info.source
        elseif what == "l" then
          return Info.currentline
        elseif what == "n" then
          return Info.name
        elseif what == "a" then
          return Info.nparams or 0, Info.isvararg or false
        elseif what == "u" then
          return Info.nups or 0
        elseif what == "f" then
          return target
        elseif what == "w" then
          return Info.what
        end
        return nil
      end
      
      return nil
    end,
    traceback = function(msg, level)
      local tb = debug.traceback(msg, level)
      return tb
    end,
    getproto = function(Func, _, Active)
      if ECore.iscclosure(Func) then
        error("Cannot call debug.getproto on a C closure")
      end
      local FakeProto = function()
        return nil
      end
      if Active then
        return { 
          function() 
            return true 
          end 
        }
      else
        return FakeProto
      end
    end,
    getprotos = function(Func)
      if ECore.iscclosure(Func) then
        error("Cannot call debug.getprotos on a C closure")
      end
      return {1}
    end,
    getstack = function(Level, What)
      if Level == 0 then
        error("Cannot call debug.getstack on a C closure")
      end
      if What then
        return Stack[What]
      else
        return Stack
      end
    end,
    getconstant = function(Func, Index)
      if ECore.iscclosure(Func) then
        error("Cannot call debug.getconstant on a C closure")
      end
      local Constants = {"print", nil, "Hello, world!"}
      return Constants[Index]
    end,
    getconstants = function(Func)
      if ECore.iscclosure(Func) then
        error("Cannot call debug.getconstants on a C closure")
      end
      local Constants = {50000, "print", nil, "Hello, world!", "warn"}
      return Constants
    end,
    getupvalue = function(Func, Index)
      return Debug.getupvalues(Func)[Index]
    end,
    getupvalues = function(Func)
      local Upvalue = {}
      local Func = setfenv(Func, setmetatable({}, {
        __index = function(_, Key)
          return function(...)
            local Arguments = {...}
            for _, Value in ipairs(Arguments) do
              table.insert(Upvalue, Value)
            end
          end
        end
      }))
      pcall(function()
        local Returned = Func()
        if Returned then
          table.insert(Upvalue, Returned)
        end
      end)
      return Upvalue
    end,
    setconstant = function(Func, Index, New)
      
    end,
    setupvalue = function(Func, Index, New)
      
    end,
    setstack = function(Stack, Index, New)
      
    end,
    getmetatable = function(Table)
      return ECore.getrawmetatable(Table)
    end,
    setmetatable = function(Table, MT)
      return ECore.setrawmetatable(Table, MT)
    end,
  }
  
  return Debug
end)