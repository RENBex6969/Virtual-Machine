local FS = require("@lune/fs")
local Directory = "Workspace/"

FS.writeDir(Directory)

local function normalizePath(path)
  local parts, safe = {}, {}
  for part in path:gmatch("[^/]+") do
    if part == ".." then
      if #parts > 0 then
        table.remove(parts) -- go back one folder
      end
    elseif part ~= "." then
      table.insert(parts, part)
    end
  end
  local Path = table.concat(parts, "/")
  
  return Path
end

local function SafePath(path)
  return normalizePath(path)
end

local function ensurePathExists(Path)
  local Parts = {}
  for Part in Path:gmatch("[^/]+") do
    table.insert(Parts, Part)
  end
  table.remove(Parts)
  local Current = Directory
  for _, Part in ipairs(Parts) do
    Current = Current .. Part .. "/"
    FS.writeDir(Current)
  end
end

local FileSystem; FileSystem = {
  readfile = function(Path)
    assert(type(Path) == "string", 'Invalid argument #1 to "readfile", string expected, but got ' .. typeof(Path))
    
    local Status, Message = pcall(FS.readFile, Directory .. SafePath(Path))
    return Message or ""
  end,
  writefile = function(Path, Content)
    assert(type(Path) == "string", 'Invalid argument #1 to "writefile", string expected, but got ' .. typeof(Path))
    assert(type(Content) == "string", 'Invalid argument #2 to "writefile", string expected, but got ' .. typeof(Path))
    
    local Status, _ = pcall(function()
      ensurePathExists(Path)
      FS.writeFile(Directory .. SafePath(Path), Content)
    end)
    return Status
  end,
  isfile = function(Path)
    assert(type(Path) == "string", 'Invalid argument #1 to "isfile", string expected, but got ' .. typeof(Path))
    local Status, isFile = pcall(FS.isFile, Directory .. SafePath(Path))
    return Status and isFile
  end,
  makefolder = function(Path)
    assert(type(Path) == "string", 'Invalid argument #1 to "makefolder", string expected, but got ' .. typeof(Path))
    local Status, _ = pcall(FS.writeDir, Directory .. SafePath(Path))
    return Status
  end,
  isfolder = function(Path)
    assert(type(Path) == "string", 'Invalid argument #1 to "isfolder", string expected, but got ' .. typeof(Path))
    local Status, _ = pcall(FS.readDir, Directory .. SafePath(Path))
    return Status
  end,
  delfile = function(Path)
    assert(type(Path) == "string", 'Invalid argument #1 to "delfile", string expected, but got ' .. typeof(Path))
    local Status, _ = pcall(FS.removeFile, Directory .. SafePath(Path))
    return Status
  end,
  delfolder = function(Path)
    assert(type(Path) == "string", 'Invalid argument #1 to "delfolder", string expected, but got ' .. typeof(Path))
    local Status, _ = pcall(FS.removeDir, Directory .. SafePath(Path))
    return Status
  end,
  appendfile = function(Path, Content)
    assert(type(Path) == "string", 'Invalid argument #1 to "appendfile", string expected, but got ' .. typeof(Path))
    assert(type(Content) == "string", 'Invalid argument #2 to "appendfile", string expected, but got ' .. typeof(Content))
    local fullPath = Directory .. SafePath(Path)
    ensurePathExists(Path)
    local Existing = ""
    if FS.isFile(fullPath) then
      Existing = FS.readFile(fullPath)
    end
    local Final = Existing .. Content
    return FS.writeFile(fullPath, Final)
  end,
  listfiles = function(Path)
    assert(type(Path) == "string", 'Invalid argument #1 to "listfiles", string expected, but got ' .. typeof(Path))
    local CompiledFiles = {}
    local Status, _ = pcall(function()
      local Files = FS.readDir(Directory .. SafePath(Path))
      table.foreach(Files, function(_, Value)
        table.insert(CompiledFiles, Path .. "/" .. Value)
      end)
    end)
    return CompiledFiles
  end,
  dofile = function(Path) 
    
  end,
}

return FileSystem