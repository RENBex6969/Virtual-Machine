local FS = require("@lune/fs")
local Directory = "Workspace/"

FS.writeDir(Directory)

local function normalizePath(path)
  local parts, safe = {}, {}
  for part in path:gmatch("[^/]+") do
    if part == ".." then
      if #parts > 0 then
        table.remove(parts) -- go back one folder
      end
    elseif part ~= "." then
      table.insert(parts, part)
    end
  end
  local Path = table.concat(parts, "/")
  
  return Path
end

local function SafePath(path)
  return normalizePath(path)
end

local function ensurePathExists(Path)
  local Parts = {}
  for Part in Path:gmatch("[^/]+") do
    table.insert(Parts, Part)
  end
  table.remove(Parts)
  local Current = Directory
  for _, Part in ipairs(Parts) do
    Current = Current .. Part .. "/"
    FS.writeDir(Current)
  end
end

local FileSystem; FileSystem = {
  readfile = function(Path)
    return FS.readFile(Directory .. SafePath(Path))
  end,
  writefile = function(Path, Content)
    ensurePathExists(Path)
    return FS.writeFile(Directory .. SafePath(Path), Content)
  end,
  isfile = function(Path)
    return FS.isFile(Directory .. SafePath(Path))
  end,
  makefolder = function(Path)
    return FS.writeDir(Directory .. SafePath(Path))
  end,
  isfolder = function(Path)
    local succ, err = pcall(FS.readDir, Directory .. SafePath(Path))
    if succ == true then
      return true
    else
      return false
    end
  end,
  delfile = function(Path)
    return FS.removeFile(Directory .. SafePath(Path))
  end,
  delfolder = function(Path)
    return FS.removeDir(Directory .. SafePath(Path))
  end,
  appendfile = function(Path, Message)
    local fullPath = Directory .. SafePath(Path)
    ensurePathExists(Path)
    local Existing = ""
    if FS.isFile(fullPath) then
      Existing = FS.readFile(fullPath)
    end
    local Final = Existing .. Message
    return FS.writeFile(fullPath, Final)
  end,
  listfiles = function(Path)
    local Files = FS.readDir(Directory .. SafePath(Path))
    local CompiledFiles = {}
    table.foreach(Files, function(_, Value)
      table.insert(CompiledFiles, Path .. "/" .. Value)
    end)
    return CompiledFiles
  end,
  dofile = function() end,
  loadfile = function() end
}

return FileSystem