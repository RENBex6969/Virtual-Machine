return (function(Utility)
  local Registry = Utility.getModule("Registry")
  local Roblox = Registry.Roblox

  local Fonts = {
    [0] = Roblox.Font.Arial,
    [1] = Roblox.Font.BuilderSans,
    [2] = Roblox.Font.Gotham,
    [3] = Roblox.Font.RobotoMono
  }

  Registry.DrawingCache = {}  -- store all render objects

  local function ReverseGet(Value, Table)
    Table = Table or {}
    for Key, storedValue in next, Table do
      if storedValue == Value then
        return Key
      end
    end
  end

  local function Create(Class, Properties)
    local Object = Roblox.Instance.new(Class)
    for i, v in next, Properties do
      Object[i] = ReverseGet(v) or v
    end
    return Object
  end

  local Drawing = {
    Fonts = {
      UI = 0,
      System = 1,
      Plex = 2,
      Monospace = 3,
    },

    new = function(Type)
      local Object = Create("Frame", {
        Visible = true,
        Size = Roblox.UDim2.fromOffset(0, 0),
        BackgroundColor3 = Roblox.Color3.new(0, 0, 0),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ZIndex = 1,
        Parent = UI
      })

      local self = {
        Visible = Object.Visible,
        Color = Object.BackgroundColor3,
        Transparency = 1,
        ZIndex = Object.ZIndex,
        Remove = function() Object:Destroy() end
      }
      self.Destroy = self.Remove

      local function Construct(Update, Defaults, Default, Readonly)
        Readonly = Readonly or {}

        for i, v in next, Defaults do
          self[i] = v
        end

        local proxy = newproxy(true)
        local mt = getmetatable(proxy)

        mt.__index = function(_, b)
          return self[b]
        end
        mt.__newindex = function(_, Key, Value)
          if table.find(Readonly, Key) then return end
          self[Key] = Value
          Update()
        end
        mt.__metatable = "This metatable is protected."

        table.insert(Registry.DrawingCache, {proxy = proxy, instance = Object})

        return proxy
      end

      --* Shape Constructors

      if Type == 'Line' then
        return Construct(function()
          local from = self.From or Roblox.Vector2.new(0, 0)
          local to = self.To or Roblox.Vector2.new(0, 0)
          local dX, dY = to.X - from.X, to.Y - from.Y

          Object.Size = Roblox.UDim2.fromOffset(math.sqrt(dX ^ 2 + dY ^ 2), self.Thickness or 1)
          Object.Position = Roblox.UDim2.fromOffset(from.X, from.Y)
          Object.Rotation = math.deg(math.atan2(dY, dX))
        end, {
          Thickness = 1,
          From = Roblox.Vector2.new(0, 0),
          To = Roblox.Vector2.new(0, 0)
        })

      elseif Type == 'Square' then
        local Stroke = Create("UIStroke", {
          Parent = Object,
          Color = self.Color,
          Enabled = true,
          Thickness = 1
        })

        return Construct(function()
          local size = self.Size or Roblox.Vector2.new(0, 0)
          local pos = self.Position or Roblox.Vector2.new(0, 0)
          Object.Size = Roblox.UDim2.new(0, size.X, 0, size.Y)
          Object.Position = Roblox.UDim2.new(0, pos.X, 0, pos.Y)

          Stroke.Enabled = self.Filled
          Stroke.Color = self.Color
          Stroke.Thickness = self.Thickness or 1
        end, {
          Size = Roblox.Vector2.new(0, 0),
          Position = Roblox.Vector2.new(0, 0),
          Filled = false,
          Thickness = 1,
          Transparency = 0
        })

      elseif Type == 'Circle' then
        local Stroke = Create("UIStroke", {
          Parent = Object,
          Color = self.Color,
          Enabled = true
        })
        Create("UICorner", {
          Parent = Object,
          CornerRadius = Roblox.UDim.new(1, 0)
        })

        return Construct(function()
          local radius = self.Radius or 1
          local pos = self.Position or Roblox.Vector2.new(0, 0)
          Object.Size = Roblox.UDim2.fromScale(radius, radius)
          Object.Position = Roblox.UDim2.fromScale(pos.X, pos.Y)

          Stroke.Enabled = not self.Filled
          Stroke.Color = self.Color
          Stroke.Thickness = self.Thickness or 1
        end, {
          Radius = 1,
          Filled = false,
          Thickness = 1,
          NumSides = 0,
          Position = Roblox.Vector2.new(0, 0)
        })
      elseif Type == "Image" then
    local Img = Create("ImageLabel", {
        Parent = UI,
        Visible = self.Visible,
        Size = Roblox.UDim2.fromOffset(0, 0),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Image = "",
        ZIndex = self.ZIndex
    })

    return Construct(function()
        local pos = self.Position or Roblox.Vector2.new(0, 0)
        local size = self.Size or Roblox.Vector2.new(0, 0)
        Img.Position = Roblox.UDim2.fromOffset(pos.X, pos.Y)
        Img.Size = Roblox.UDim2.fromOffset(size.X, size.Y)
        Img.Image = self.Image or ""
        Img.Visible = self.Visible
    end, {
        Position = Roblox.Vector2.new(0, 0),
        Size = Roblox.Vector2.new(50, 50),
        Image = "",
        Visible = true
    })
  
      elseif Type == 'Text' then
        Object:Destroy()
        Object = Create("TextLabel", {
          Parent = UI,
          Visible = self.Visible,
          Size = Roblox.UDim2.fromOffset(0, 0),
          BackgroundColor3 = self.Color,
          BackgroundTransparency = 1 - self.Transparency,
          BorderSizePixel = 0,
          TextStrokeColor3 = self.Color,
          TextStrokeTransparency = 1,
          TextSize = self.Size,
          TextWrapped = false
        })

        return Construct(function()
          local pos = self.Position or Roblox.Vector2.new(0, 0)
          local size = self.Size or 0
          Object.Size = Roblox.UDim2.fromOffset(size * 3, size / 2)
          Object.Position = Roblox.UDim2.fromOffset(pos.X, pos.Y)
          Object.Text = self.Text or ""

          Object.Font = Fonts[self.Font or 3]
          Object.TextColor3 = self.Color
          Object.BackgroundTransparency = 1 - (self.Transparency or 0)

          if self.Center then
            Object.TextXAlignment = Enum.TextXAlignment.Center
            Object.TextYAlignment = Enum.TextYAlignment.Center
          else
            Object.TextXAlignment = Enum.TextXAlignment.Left
            Object.TextYAlignment = Enum.TextYAlignment.Top
          end

          Object.TextStrokeTransparency = self.Outline and 0 or 1
          Object.TextStrokeColor3 = self.OutlineColor
          self.TextBounds = Object.TextBounds
        end, {
          Text = '',
          Size = 0,
          Center = false,
          Outline = false,
          OutlineColor = self.Color,
          Position = Roblox.Vector2.new(0, 0),
          Font = 3
        }, true, {"TextBounds"})
      end
      
    
    end
  }
  
  return Drawing
end)